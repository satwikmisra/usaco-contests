#include <bits/stdc++.h>

using namespace std;
#define MAXSZ 100001

int n, q;
vector<pair<int,pair<int,int>>>edges;
vector<pair<int,int>>qu;
vector<pair<int,int>>reg;
map<pair<int,int>,int>ans;

int height[MAXSZ];
int par[MAXSZ];
int size[MAXSZ];

void uinit(){
    for(int i=0;i<MAXSZ;i++){
        height[i]=1;
        par[i]=i;
        size[i]=1;
    }
}

int ufind(int key){
    if(par[key]!=key){
        par[key]=ufind(par[key]);
    }
    return par[key];
}

bool connected(int a, int b){
    return (ufind(a)==ufind(b));
}

void umerge(int a, int b){
    int roota=ufind(a);
    int rootb=ufind(b);
    if(roota==rootb) return;
    if(height[roota]>height[rootb]){
        par[rootb]=roota;
        size[roota]+=size[rootb];
        height[roota]=max(height[roota], height[rootb]+1);
    }
    else{
        par[roota]=rootb;
        size[rootb]+=size[roota];
        height[rootb]=max(height[rootb], height[roota]+1);
    }
}


int main()
{
    ifstream cin("mootube.in");
    ofstream cout("mootube.out");
    cin>>n>>q;
    for(int i=0;i<n-1;i++){
        int t1, t2, t3; cin>>t1>>t2>>t3;
        edges.push_back(make_pair(t3,make_pair(t1,t2)));
    }

    for(int i=0;i<q;i++){
        int t1, t2; cin>>t1>>t2;
        qu.push_back(make_pair(t1,t2));
        reg.push_back(make_pair(t1,t2));
    }
    sort(qu.begin(),qu.end());
    sort(edges.begin(),edges.end());
    reverse(qu.begin(),qu.end());
    reverse(edges.begin(),edges.end());
    uinit();
    int in=0;
    for(int i=0;i<q;i++){
        int cut=qu[i].first;
        while(in<n-1 && edges[in].first>=cut){
            umerge(edges[in].second.first,edges[in].second.second);
            in++;
        }
        ans[make_pair(cut,qu[i].second)]=size[ufind(qu[i].second)];
    }
    for(int i=0;i<q;i++){
        cout<<ans[reg[i]]-1<<"\n";
    }
    return 0;
}
