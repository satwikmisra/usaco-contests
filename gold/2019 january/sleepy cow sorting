#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional> // for less 
#include <bits/stdc++.h> 
using namespace __gnu_pbds; 
using namespace std; 
  
typedef tree<int, null_type, less<int>, rb_tree_tag, 
             tree_order_statistics_node_update> 
    os; 

int n;
vector<int>v;

int main() {
	ifstream cin("sleepy.in");
	ofstream cout("sleepy.out");
	cin>>n;
	for(int i=0;i<n;i++){
		int t; cin>>t; v.push_back(t);
	}
	int cut=n-1;
	while(cut>=0 && v[cut]>v[cut-1]){
		cut--;
	}
	os set1;
	os set2;
	for(int i=n-1;i>=cut;i--){
		set2.insert(v[i]);
	}
	for(int i=0;i<cut;i++){
		set1.insert(v[i]);
	}
	cout<<cut<<"\n";
	vector<int>ans;
	for(int i=0;i<cut;i++){
		int temp=0;
		temp+=set2.order_of_key(v[i]);
		set2.insert(v[i]);
		temp+=(set1.size()-1);
		set1.erase(v[i]);
		ans.push_back(temp);
	}
	for(int i=0;i<ans.size()-1;i++) cout<<ans[i]<<" ";
	cout<<ans[ans.size()-1];
	
	return 0;
}
