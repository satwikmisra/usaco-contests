#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
using namespace __gnu_pbds; 
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, 
             tree_order_statistics_node_update> 
    oset; 

int n;
vector<int>v;

int main() {
	ifstream cin("bphoto.in");
	ofstream cout("bphoto.out");
	oset s1;
	oset s2;
	cin>>n;
	for(int i=0;i<n;i++){
		int t; cin>>t; v.push_back(t);
		if(i==0) s1.insert(t);
		else if(i!=1) s2.insert(t);
	}
	int ans=2;
	for(int i=1;i<n-1;i++){
		int L=s1.size()-s1.order_of_key(v[i]);
		int R=s2.size()-s2.order_of_key(v[i]);
		if(max(L,R)>2*min(L,R)){
			ans++;
		}
		s2.erase(v[i+1]);
		s1.insert(v[i]);
	}
	cout<<ans;
	return 0;
}
