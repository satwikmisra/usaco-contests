#include <bits/stdc++.h>

using namespace std;

int n;
int arr[100001];
int st[50001];
int en[50001];

struct BIT{
    vector<int>bit;
    int size;
    BIT(int sz){
        bit.resize(sz+1);
        size=sz;
    }
    int lsb(int num){
        return num & -num;
    }
    void update(int pos, int val){
        while(pos<=size){
            bit[pos]+=val;
            pos+=lsb(pos);
        }
    }
    void reset(int pos){
        int val=rangesum(pos,pos);
        update(pos,-val);
    }
    int sum(int pos){
        int ret=0;
        while(pos>0){
            ret+=bit[pos];
            pos-=lsb(pos);
        }
        return ret;
    }
    int rangesum(int a, int b){
        return sum(b)-sum(a-1);
    }
};

//above is the implementation of a binary indexed tree for range sum queries


int main()
{
    ifstream cin("circlecross.in");
    ofstream cout("circlecross.out");
    cin>>n;
    memset(st,-1,sizeof(st));
    memset(en,-1,sizeof(en));
    //if there's a barn at the position, we set it equal to 1
    for(int i=1;i<=2*n;i++){
        int t; cin>>t; arr[i]=t;
        if(st[t]==-1) st[t]=i;
        else en[t]=i;
    }
    //we use 2 pointed to traverse through the list and find the maximum range sum
    int ans=0;
    BIT bi=BIT(100001);
    for(int i=1;i<=2*n;i++){
        if(i==st[arr[i]]){
            bi.update(i,1);
        }
        else{
            ans+=(bi.rangesum(st[arr[i]],en[arr[i]])-1);
            bi.update(st[arr[i]],-1);
        }
    }
    //our answer is the sum of all of these intervals
    cout<<ans;
    return 0;
}
