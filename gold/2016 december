#include <bits/stdc++.h>

using namespace std;

int n;
vector<pair<int,int>>v;
bool pos[1001][1001];
bool visit[1001];
int ret=0;

void dfs(int source){
    for(int i=0;i<n;i++){
        if(pos[source][i]){
            if(visit[i]) continue;
            visit[i]=true;
            ret++;
            dfs(i);
        }
    }
}

void gen(int x){
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if( (v[i].second-v[j].second)*(v[i].second-v[j].second) + (v[i].first-v[j].first)*(v[i].first-v[j].first) <= x ){
                pos[i][j]=pos[j][i]=true;
            }
        }
    }
}

bool check(int x){
    memset(pos,false,sizeof(pos));
    memset(visit,false,sizeof(visit));
    ret=0;
    gen(x);
    dfs(0);
    if(ret==n) return true;
    else return false;
}

int main()
{
    ifstream cin("moocast.in");
    ofstream cout("moocast.out");
    cin>>n;
    for(int i=0;i<n;i++){
        int t1,t2; cin>>t1>>t2;
        v.push_back(make_pair(t1,t2));
    }
    int hi=INT_MAX; int lo=0;
    while(lo<hi){
        int mid=(hi+lo)/2;
        if(check(mid)){
            hi=mid;
        }
        else{
            lo=mid+1;
        }
    }
    cout<<lo;

    return 0;
}
